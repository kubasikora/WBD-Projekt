from flask import Flask, Response, request
from flask_cors import CORS
import datetime
import cx_Oracle
import json

app = Flask(__name__)
CORS(app)


@app.route('/')
def hello_world():
    con = cx_Oracle.connect("rwojtas", "rwojtas", cx_Oracle.makedsn("194.29.160.131", 1521, "ora3inf"))
    print(con.version)
    return 'Hello World!<br>connection version: <br>' + con.version


@app.route('/incoming_matches')
def show_incoming_matches():
    con = cx_Oracle.connect("rwojtas", "rwojtas", cx_Oracle.makedsn("194.29.160.131", 1521, "ora3inf"))
    cur = con.cursor()
    cur.execute(
        'select "MeczId", extract(year from m."DataRozpoczecia"), extract(month from m."DataRozpoczecia"), extract(day from m."DataRozpoczecia"), dh."Nazwa", da."Nazwa", st."Nazwa", ref."Imie", ref."Nazwisko", t."Nazwa", w."WynikGospodarzy", w."WynikGosci"  from "Mecze" m join "Druzyny" dh on dh."DruzynaId"=m."DruzynaGospodarzyId" join "Druzyny" da on da."DruzynaId"= m."DruzynaGosciId" join "Stadiony" st on st."StadionId" = m."StadionId" join "Sedziowie" ref on ref."SedziaId" = m."SedziaId" join "Turnieje" t on t."TurniejId" = m."TurniejId" join "Wyniki" w on w."WynikId" = m."WynikId" where m."WynikId" IS NULL')

    resp = cur.fetchmany(numRows=10)
    return Response(json.dumps(resp), mimetype='application/json')


@app.route('/finished_matches')
def show_finished_matches():
    # sqlQuery = 'select * from "Mecze" m join "Druzyny" dh on dh."DruzynaId"=m."DruzynaGospodarzyId" join "Druzyny" da on da."DruzynaId"= m."DruzynaGosciId" join "Stadiony" s on s."StadionId" = m."StadionId" join "Sedziowie" ref on ref."SedziaId" = m."SedziaId" join "Turnieje" t on t."TurniejId" = m."TurniejId" join "Wyniki" w on w."WynikId" = m."WynikId" where m."WynikId" IS NOT NULL;'

    con = cx_Oracle.connect("rwojtas", "rwojtas", cx_Oracle.makedsn("194.29.160.131", 1521, "ora3inf"))
    cur = con.cursor()
    cur.execute('select "MeczId", extract(year from m."DataRozpoczecia"), extract(month from m."DataRozpoczecia"), extract(day from m."DataRozpoczecia"), dh."Nazwa", da."Nazwa", st."Nazwa", ref."Imie", ref."Nazwisko", t."Nazwa", w."WynikGospodarzy", w."WynikGosci"  from "Mecze" m join "Druzyny" dh on dh."DruzynaId"=m."DruzynaGospodarzyId" join "Druzyny" da on da."DruzynaId"= m."DruzynaGosciId" join "Stadiony" st on st."StadionId" = m."StadionId" join "Sedziowie" ref on ref."SedziaId" = m."SedziaId" join "Turnieje" t on t."TurniejId" = m."TurniejId" join "Wyniki" w on w."WynikId" = m."WynikId" where m."WynikId" IS NOT NULL')

    resp = cur.fetchmany(numRows=10)
    return Response(json.dumps(resp), mimetype='application/json')


@app.route('/sign_in')
def sign_in_operation():
    #ogin = "robart"
    #password = "robar123"
    try:
        login = request.args.get("login")
        password = request.args.get("password")
    except ValueError:
        resp = {
            "error": True,
            "message": "Invalid arguments"
        }

    con = cx_Oracle.connect("rwojtas", "rwojtas", cx_Oracle.makedsn("194.29.160.131", 1521, "ora3inf"))
    cur = con.cursor()

    cur.execute('select "UzytkownikId", "Login", "Imie", "Nazwisko" from "Uzytkownicy" where "Login"=' + "'" + login + "'" + ' and "Haslo"=' + "'" + password + "'")

    resp = cur.fetchone()
    return Response(json.dumps(resp), mimetype='application/json')

@app.route("/tournaments_sign_up")#, dsmethods=['POST'])
def sign_up_for_tournament():
    try:
        tournament = int(request.args.get("TurniejId"))
        user = int(request.args.get("UzytkownikId"))
        con = cx_Oracle.connect("rwojtas", "rwojtas", cx_Oracle.makedsn("194.29.160.131", 1521, "ora3inf"))
        cur = con.cursor()

        statement = 'insert into "ZapisyUzytkownikow"("UzytkownikId", "TurniejId") values (:1, :2)'
        cur.execute(statement, (str(user), str(tournament)))
        con.commit()
        resp = 'ok'
    except ValueError:
        resp = {
            "error": True,
            "message": "Invalid arguments"
        }
    return Response(json.dumps(resp), mimetype='application/json')

@app.route('/tournament_list')
def show_available_tournaments():
    try:
        user = request.args.get("UzytkownikId")

        con = cx_Oracle.connect("rwojtas", "rwojtas", cx_Oracle.makedsn("194.29.160.131", 1521, "ora3inf"))
        cur = con.cursor()

        cur.execute('select "TurniejId", "Nazwa", extract(year from "DataRozpoczecia"), extract(month from "DataRozpoczecia"), extract(day from "DataRozpoczecia") from "Turnieje" where "TurniejId" not in (select "TurniejId" from "ZapisyUzytkownikow" where "UzytkownikId"=' + str(user) + ')')
        resp = cur.fetchall()
    except ValueError:
        resp = {
            "error": True,
            "message": "Invalid arguments"
        }
    return Response(json.dumps(resp), mimetype='application/json')

@app.route('/bets_list')
def show_available_bets():
    try:
        user = '1' #request.args.get("UzytkownikId")
        con = cx_Oracle.connect("rwojtas", "rwojtas", cx_Oracle.makedsn("194.29.160.131", 1521, "ora3inf"))
        cur = con.cursor()
        final = []

        #cur.execute('select z."ZakladId", m."DruzynaGospodarzy", m."DruzynaGosci", extract(year from m."DataRozpoczecia"), extract(month from m."DataRozpoczecia"), extract(day from m."DataRozpoczecia"), t."Nazwa" from "Zaklady" z join "Mecze" m join "Druzyny" dh on dh."on m."MeczId"=z."MeczId" ''')
        cur.execute('select "MeczId", extract(year from m."DataRozpoczecia"), extract(month from m."DataRozpoczecia"), extract(day from m."DataRozpoczecia"), dh."Nazwa", da."Nazwa", t."Nazwa" from "Mecze" m join "Druzyny" dh on m."DruzynaGospodarzyId"=dh."DruzynaId" join "Druzyny" da on m."DruzynaGosciId"=da."DruzynaId" join "Turnieje" t on t."TurniejId"=m."TurniejId" where m."WynikId" IS NULL and m."TurniejId" in (select "TurniejId" from "ZapisyUzytkownikow" where "UzytkownikId"= ' + user + ') order by t."Nazwa"')
        resp = cur.fetchall()
        for row in resp:
            final.append(row)
            match = str(row[0])
            cur.execute('select "ZakladId", "WynikGospodarzy", "WynikGosci" from "Zaklady" where "MeczId"=' + str(match) + ' and "UzytkownikId"=' + str(user))
            bet = cur.fetchone()
            final.append(bet)

    except ValueError:
        final = {
            "error": True,
            "message": "Invalid arguments"
        }
    return Response(json.dumps(final), mimetype='application/json')

@app.route('/add_bet')
def add_or_update_bets():
    try:
        resp = 'ok'
        user = '1' #request.args.get("UzytkownikId")
        score_h = '4' #request.args.get("WynikGosp")
        score_a = '0' #request.args.get("WynikGosc")
        match = '3' #request.args.get("MeczId")

        con = cx_Oracle.connect("rwojtas", "rwojtas", cx_Oracle.makedsn("194.29.160.131", 1521, "ora3inf"))
        con.autocommit
        cur = con.cursor()

        cur.execute('select * from "Zaklady" where "MeczId"='+ str(match) + ' and "UzytkownikId"=' + str(user))
        checkBets = cur.fetchall()
        print(cur.rowcount)
        if cur.rowcount == 0:
            statement = 'insert into "Zaklady" values (:1, :2, :3, :4, :5, :6, :7)'
            cur.execute()
            #cur.execute(statement, ('(select nvl(max("ZakladId")+1,1) from "Zaklady")', score_h, score_a, , match, user, 'null'))
    except ValueError:
        resp = {
            "error": True,
            "message": "Invalid arguments"
        }
    return Response(json.dumps(resp), mimetype='application/json')

if __name__ == '__main__':
    app.run()
